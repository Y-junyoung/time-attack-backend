// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  encryptedPassword String
  profile           UserProfile[]
  createdAt         DateTime      @default(now())
}

model UserProfile {
  userId          String     @id
  user            User       @relation(fields: [userId], references: [email])
  nickname        String     @unique
  description     String
  writtenTweets   Tweet[]    @relation(name: "writtenTweets")
  writtenComments Comment[]
  bookmarks       Bookmark[]
  followers       Follows[]  @relation("Followers")
  followings      Follows[]  @relation("Followings")
}

model Tweet {
  id        Int         @id @default(autoincrement())
  author    UserProfile @relation(name: "writtenTweets", fields: [authorId], references: [userId])
  authorId  String
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  bookmark  Bookmark[]
  comments  Comment[]
}

model Follows {
  following   UserProfile @relation("Followings", fields: [followerId], references: [userId])
  followerId  String
  follower    UserProfile @relation("Followers", fields: [followingId], references: [userId])
  followingId String

  @@id([followerId, followingId])
}

model Comment {
  id        Int         @id @default(autoincrement())
  authorId  String
  tweetId   Int
  content   String
  author    UserProfile @relation(fields: [authorId], references: [userId])
  tweet     Tweet       @relation(fields: [tweetId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Bookmark {
  id        Int         @default(autoincrement())
  user      UserProfile @relation(fields: [userId], references: [userId])
  tweet     Tweet       @relation(fields: [tweetId], references: [id])
  userId    String
  tweetId   Int
  createdAt DateTime    @default(now())

  @@unique([userId, tweetId])
}
